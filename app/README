塾成績管理システム
これはPythonのWebフレームワークであるFlaskを使用して作成された、塾の生徒の成績を管理するためのシンプルなWebアプリケーションです。

生徒の登録や、毎週行われるテストの点数を日付ごとに記録・管理することができます。

主な機能
生徒管理: 生徒の新規登録と削除ができます。

カレンダー連携: 毎週水曜日のテスト日をカレンダー形式で表示し、選択できます。

成績一括入力: 選択した日付のテストについて、在籍している全生徒の成績を一度に入力・更新できます。

データ永続化: 入力されたすべてのデータはSQLiteデータベースに保存され、サーバーを停止しても消えません。

動作環境
Python 3.x

Flask

セットアップ手順
必要なライブラリのインストール
ターミナル（PowerShell）で以下のコマンドを実行し、Flaskをインストールします。

Bash

pip install Flask
データベースの初期化
プロジェクトフォルダで以下のコマンドを一度だけ実行し、データベースファイル (database.db) と必要なテーブルを作成します。

Bash

py init_db.py
アプリケーションの起動
以下のコマンドで開発サーバーを起動します。

Bash

py -m flask run --debug
サーバーが起動したら、Webブラウザで http://127.0.0.1:5000 にアクセスしてください。

使用方法
トップページ（生徒管理）

新しい生徒の名前を入力して登録します。

在籍生徒一覧から生徒を削除できます。

「成績入力へ」のリンクをクリックしてカレンダー画面に移動します。

カレンダーページ

成績を入力したいテストの日付（水曜日）を選択します。

成績入力ページ

選択した日付の成績入力画面が表示されます。

各生徒の点数を入力し、「登録/更新」ボタンを押すとデータが保存されます。

すでに入力済みのデータは表示され、修正することも可能です。


Ⅰ. フロントエンド (クライアントサイド)
役割: ユーザーのWebブラウザ内で実行され、ユーザーインターフェース（UI）の描画と操作を担当する層です。「プレゼンテーション層」とも呼ばれます。

HTML (HyperText Markup Language): Webページの骨格となる構造を定義する言語。<table>や<form>といった要素を配置し、情報の構造を決定しました。

CSS (Cascading Style Sheets): HTMLで定義した構造に対して、レイアウト、色彩、フォントなどの視覚的なスタイルを適用する言語。

JavaScript: Webページに動的な振る舞いを付与するプログラミング言語。今回は直接的なコーディングよりも、JavaScriptで構築されたライブラリを利用しました。

Chart.js (JavaScriptライブラリ): バックエンドから受け取ったデータを基に、ブラウザ上でインタラクティブなグラフを動的に描画するために使用。外部ライブラリを導入し、APIを利用するスキルにあたります。

Ⅱ. バックエンド (サーバーサイド)
役割: サーバー上で動作し、アプリケーションの中核となるビジネスロジック、データ処理、リクエストへの応答などを担当する層です。「アプリケーション層」とも呼ばれます。

Python: バックエンドのロジックを記述するために使用した、汎用性の高いプログラミング言語。

Flask (WSGIマイクロフレームワーク): PythonでWebアプリケーションを構築するための基盤。以下の機能を提供します。

ルーティング: HTTPリクエスト（特定のURLへのアクセス）を、処理担当のPython関数（ビュー関数）に紐付ける機能。@app.route()デコレータがこれに該当します。

リクエスト/レスポンス処理: ブラウザからのデータ（フォーム入力など）を受け取り、処理結果をHTMLなどの形式でブラウザに返す一連の流れを管理します。

テンプレートエンジン (Jinja2): サーバー側で動的にHTMLを生成する仕組み。静的なHTMLテンプレートに、データベースから取得したデータなどの動的な情報を埋め込むことで、ユーザーに応じたページを生成します。

Gunicorn (WSGI HTTP Server): Flaskに標準搭載されている開発用サーバーとは異なり、多数の同時アクセスを安定して処理できる本番環境（プロダクション）用のアプリケーションサーバー。RenderのようなPaaS環境では、このような堅牢なサーバーを介してFlaskアプリケーションが実行されます。

Ⅲ. データベース
役割: アプリケーションで扱うデータを永続的に保存、管理、取得する層です。「データ永続化層」とも呼ばれます。

リレーショナルデータベース (RDBMS): データを正規化された表（テーブル）形式で管理するデータベースモデル。データの整合性や一貫性を保つのに優れています。

SQL (Structured Query Language): RDBMSを操作するための標準言語。SELECT, INSERT, UPDATE, DELETE, JOINといったコマンドを発行し、データのCRUD（作成、読み取り、更新、削除）操作を行いました。

PostgreSQL: 高機能かつ信頼性の高いオープンソースのRDBMS。トランザクション管理や同時接続性に優れており、Webアプリケーションの本番環境データベースとして広く採用されています。

SQLite: サーバーを必要とせず、単一ファイルで動作する軽量なRDBMS。主にローカルでの開発やテスト用途で利用しました。

データベースドライバ (psycopg2): PythonアプリケーションとPostgreSQLデータベースサーバー間の通信を仲介するライブラリ。SQLクエリの実行や結果の受け渡しを可能にします。

Ⅳ. DevOps と デプロイ (開発・運用)
役割: 開発したアプリケーションを管理し、インフラ上に展開して公開・運用するための一連の技術とプラクティスです。

バージョン管理システム (Git / GitHub):

Git: ソースコードの変更履歴を分散型で管理するシステム。コードのどの部分をいつ変更したかを正確に追跡します。

GitHub: Gitリポジトリをホスティングするクラウドサービス。コードのバックアップ、チームでの共同作業、そしてRenderのような外部サービスとのCI/CD（継続的インテグレーション/継続的デプロイ）連携のハブとして機能します。

仮想環境 (venv): プロジェクトごとにPythonの実行環境とライブラリを隔離する仕組み。依存関係の衝突を防ぎ、開発環境の再現性を保証します。

PaaS (Platform as a Service - Render): アプリケーションの実行基盤（インフラ）をサービスとして提供するクラウドモデル。サーバーの物理的な管理やOSのメンテナンスを意識することなく、コードと設定をアップロードするだけでアプリケーションを公開できます。

環境変数: データベースの接続情報などの設定値を、ソースコードから分離して管理する手法。.envファイルとpython-dotenvライブラリを用い、ローカル環境と本番環境で異なる設定を安全に適用する方法を実践しました。